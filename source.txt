import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import keras
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import img_to_array,load_img
from keras.applications.vgg19 import VGG19,preprocess_input,decode_predictions
train_datagen=ImageDataGenerator(zoom_range=0.5,shear_range=0.3,horizontal_flip=True,preprocessing_function=preprocess_input)
val_datagen=ImageDataGenerator(preprocessing_function=preprocess_input)
train=train_datagen.flow_from_directory(directory="/content/drive/MyDrive/Dataset/train",target_size=(256,256),batch_size=32)
val=val_datagen.flow_from_directory(directory="/content/drive/MyDrive/Dataset/validation",target_size=(256,256),batch_size=32)
from keras.layers import Dense,Flatten
from keras.models import Model
from keras.applications.vgg19 import VGG19
import keras
base_model=VGG19(input_shape=(256,256,3),include_top=False)
for layer in base_model.layers:
  layer.trainable=False
X=Flatten()(base_model.output)
X=Dense(units=30,activation='softmax')(X)
model=Model(base_model.input,X)
model.compile(optimizer='adam',loss=keras.losses.categorical_crossentropy,metrics=['accuracy'])
from keras.callbacks import ModelCheckpoint,EarlyStopping

es=EarlyStopping(monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1)

mc=ModelCheckpoint(filepath="best_model.h5",
                   monitor='val_accuracy',
                   min_delta=0.01,
                   patience=3,
                   verbose=1,
                   save_best_only=True)
cb=[es,mc]
his=model.fit_generator(train,
                        steps_per_epoch=16,
                        epochs=50,
                        verbose=1,
                        callbacks=cb,
                        validation_data=val,
                        validation_steps=16)
h=his.history
h.keys()
from keras.models import load_model
model=load_model("/content/best_model.h5")
acc=model.evaluate_generator(val)[1]
print(f"the model accuracy is={acc*100}%")
ref=dict(zip(list(train.class_indices.values()),list(train.class_indices.keys())))
def prediction(path):
  img=load_img(path,target_size=(256,256))
  i=img_to_array(img)
  im=preprocess_input(i)
  img=np.expand_dims(im,axis=0)
  pred=np.argmax(model.predict(img))
  print(f"the img belongs to {ref[pred]}")
path="/content/drive/MyDrive/Dataset/test/rice/image (10).jpg"
prediction(path)